export interface Config {
    channelAccessToken?: string;
    channelSecret?: string;
}
export interface ClientConfig extends Config {
    channelAccessToken: string;
}
export interface MiddlewareConfig extends Config {
    channelSecret: string;
}
export declare type Profile = {
    displayName: string;
    userId: string;
    pictureUrl: string;
    statusMessage: string;
};
export declare type WebhookEvent = MessageEvent | FollowEvent | UnfollowEvent | JoinEvent | LeaveEvent | PostbackEvent | BeaconEvent;
export declare type EventBase = {
    timestamp: number;
    source: EventSource;
};
export declare type EventSource = User | Group | Room;
export declare type User = {
    type: "user";
    userId: string;
};
export declare type Group = {
    type: "group";
    groupId: string;
    userId?: string;
};
export declare type Room = {
    type: "room";
    roomId: string;
    userId?: string;
};
export declare type ReplyableEvent = EventBase & {
    replyToken: string;
};
export declare type MessageEvent = {
    type: "message";
    message: EventMessage;
} & ReplyableEvent;
export declare type FollowEvent = {
    type: "follow";
} & ReplyableEvent;
export declare type UnfollowEvent = {
    type: "unfollow";
} & EventBase;
export declare type JoinEvent = {
    type: "join";
} & ReplyableEvent;
export declare type LeaveEvent = {
    type: "leave";
} & EventBase;
export declare type PostbackEvent = {
    type: "postback";
    postback: Postback;
} & ReplyableEvent;
export declare type BeaconEvent = ReplyableEvent & {
    type: "beacon";
    beacon: {
        type: "enter" | "leave" | "banner";
        hwid: string;
        dm?: string;
    };
};
export declare type EventMessage = TextEventMessage | ImageEventMessage | VideoEventMessage | AudioEventMessage | LocationEventMessage | FileEventMessage | StickerEventMessage;
export declare type EventMessageBase = {
    id: string;
};
export declare type TextEventMessage = {
    type: "text";
    text: string;
} & EventMessageBase;
export declare type ImageEventMessage = {
    type: "image";
} & EventMessageBase;
export declare type VideoEventMessage = {
    type: "video";
} & EventMessageBase;
export declare type AudioEventMessage = {
    type: "audio";
} & EventMessageBase;
export declare type FileEventMessage = {
    type: "file";
    fileName: string;
    fileSize: string;
} & EventMessageBase;
export declare type LocationEventMessage = {
    type: "location";
    title: string;
    address: string;
    latitude: number;
    longitude: number;
} & EventMessageBase;
export declare type StickerEventMessage = {
    type: "sticker";
    packageId: string;
    stickerId: string;
} & EventMessageBase;
export declare type Postback = {
    data: string;
    params?: {
        date?: string;
        time?: string;
        datetime?: string;
    };
};
export declare type Message = TextMessage | ImageMessage | VideoMessage | AudioMessage | LocationMessage | StickerMessage | ImageMapMessage | TemplateMessage | FlexMessage;
export declare type TextMessage = {
    type: "text";
    text: string;
};
export declare type ImageMessage = {
    type: "image";
    originalContentUrl: string;
    previewImageUrl: string;
};
export declare type VideoMessage = {
    type: "video";
    originalContentUrl: string;
    previewImageUrl: string;
};
export declare type AudioMessage = {
    type: "audio";
    originalContentUrl: string;
    duration: number;
};
export declare type LocationMessage = {
    type: "location";
    title: string;
    address: string;
    latitude: number;
    longitude: number;
};
export declare type StickerMessage = {
    type: "sticker";
    packageId: string;
    stickerId: string;
};
export declare type ImageMapMessage = {
    type: "imagemap";
    baseUrl: string;
    altText: string;
    baseSize: Size;
    actions: ImageMapAction[];
};
export declare type TemplateMessage = {
    type: "template";
    altText: string;
    template: TemplateContent;
};
export declare type FlexMessage = {
    type: "flex";
    altText: string;
    contents: FlexContainer;
};
export declare type ImageMapAction = ImageMapURIAction | ImageMapMessageAction;
export declare type ImageMapActionBase = {
    area: Area;
};
export declare type ImageMapURIAction = {
    type: "uri";
    linkUri: string;
} & ImageMapActionBase;
export declare type ImageMapMessageAction = {
    type: "message";
    text: string;
} & ImageMapActionBase;
export declare type Area = {
    x: number;
    y: number;
    width: number;
    height: number;
};
export declare type FlexContainer = FlexBubble | FlexCarousel;
export declare type FlexBubble = {
    type: "bubble";
    direction?: "ltr" | "rtl";
    header?: FlexBox;
    hero?: FlexImage;
    body?: FlexBox;
    footer?: FlexBox;
    styles?: FlexBubbleStyle;
};
export declare type FlexBubbleStyle = {
    header?: FlexBlockStyle;
    hero?: FlexBlockStyle;
    body?: FlexBlockStyle;
    footer?: FlexBlockStyle;
};
export declare type FlexBlockStyle = {
    backgroundColor?: string;
    separator?: boolean;
    separatorColor?: string;
};
export declare type FlexCarousel = {
    type: "carousel";
    contents: FlexBubble[];
};
export declare type FlexComponent = FlexBox | FlexButton | FlexFiller | FlexIcon | FlexImage | FlexSeparator | FlexSpacer | FlexText;
export declare type FlexBox = {
    type: "box";
    layout: "horizontal" | "vertical" | "baseline";
    contents: FlexComponent[];
    flex?: number;
    spacing?: "none" | "xs" | "sm" | "md" | "lg" | "xl" | "xxl";
    margin?: "none" | "xs" | "sm" | "md" | "lg" | "xl" | "xxl";
};
export declare type FlexButton = {
    type: "button";
    action: Action;
    flex?: number;
    margin?: "none" | "xs" | "sm" | "md" | "lg" | "xl" | "xxl";
    height?: "sm" | "md";
    style?: "link" | "primary" | "secondary";
    color?: string;
    gravity?: "top" | "bottom" | "center";
};
export declare type FlexFiller = {
    type: "filler";
};
export declare type FlexIcon = {
    type: "icon";
    url: string;
    margin?: "none" | "xs" | "sm" | "md" | "lg" | "xl" | "xxl";
    size?: "xxs" | "xs" | "sm" | "md" | "lg" | "xl" | "xxl" | "3xl" | "4xl" | "5xl";
    aspectRatio?: "1:1" | "2:1" | "3:1";
};
export declare type FlexImage = {
    type: "image";
    url: string;
    flex?: number;
    margin?: "none" | "xs" | "sm" | "md" | "lg" | "xl" | "xxl";
    align?: "start" | "end" | "center";
    gravity?: "top" | "bottom" | "center";
    size?: "xxs" | "xs" | "sm" | "md" | "lg" | "xl" | "xxl" | "3xl" | "4xl" | "5xl" | "full";
    aspectRatio?: "1:1" | "1.51:1" | "1.91:1" | "4:3" | "16:9" | "20:13" | "2:1" | "3:1" | "3:4" | "9:16" | "1:2" | "1:3";
    aspectMode?: "cover" | "fit";
    backgroundColor?: string;
    action?: Action;
};
export declare type FlexSeparator = {
    type: "separator";
    margin?: "none" | "xs" | "sm" | "md" | "lg" | "xl" | "xxl";
    color?: string;
};
export declare type FlexSpacer = {
    type: "spacer";
    size: "xs" | "sm" | "md" | "lg" | "xl" | "xxl";
};
export declare type FlexText = {
    type: "text";
    text: string;
    flex?: number;
    margin?: "none" | "xs" | "sm" | "md" | "lg" | "xl" | "xxl";
    size?: "xxs" | "xs" | "sm" | "md" | "lg" | "xl" | "xxl" | "3xl" | "4xl" | "5xl";
    align?: "start" | "end" | "center";
    gravity?: "top" | "bottom" | "center";
    wrap?: boolean;
    weight?: "regular" | "bold";
    color?: string;
    action?: Action;
};
export declare type TemplateContent = TemplateButtons | TemplateConfirm | TemplateCarousel | TemplateImageCarousel;
export declare type TemplateButtons = {
    type: "buttons";
    thumbnailImageUrl?: string;
    imageAspectRatio?: "rectangle" | "square";
    imageSize?: "cover" | "contain";
    imageBackgroundColor?: string;
    title?: string;
    text: string;
    actions: Action[];
};
export declare type TemplateConfirm = {
    type: "confirm";
    text: string;
    actions: Action[];
};
export declare type TemplateCarousel = {
    type: "carousel";
    columns: TemplateColumn[];
    imageAspectRatio?: "rectangle" | "square";
    imageSize?: "cover" | "contain";
};
export declare type TemplateColumn = {
    thumbnailImageUrl?: string;
    imageBackgroundColor?: string;
    title?: string;
    text: string;
    actions: Action[];
};
export declare type TemplateImageCarousel = {
    type: "image_carousel";
    columns: TemplateImageColumn;
};
export declare type TemplateImageColumn = {
    imageUrl: string;
    action: Action<{
        label?: string;
    }>;
};
export declare type Action<ExtraFields = {
    label: string;
}> = (PostbackAction | MessageAction | URIAction | DatetimePickerAction) & ExtraFields;
export declare type PostbackAction = {
    type: "postback";
    data: string;
    text?: string;
    displayText?: string;
};
export declare type MessageAction = {
    type: "message";
    text: string;
};
export declare type URIAction = {
    type: "uri";
    uri: string;
};
export declare type DatetimePickerAction = {
    type: "datetimepicker";
    data: string;
    mode: "date" | "time" | "datetime";
    initial?: string;
    max?: string;
    min?: string;
};
export declare type Size = {
    width: number;
    height: number;
};
export declare type RichMenu = {
    size: Size;
    selected: boolean;
    name: string;
    chatBarText: string;
    areas: Array<{
        bounds: Area;
        action: Action<{}>;
    }>;
};
export declare type RichMenuResponse = {
    richMenuId: string;
} & RichMenu;
